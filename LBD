-----Criar um database----------------------------------------
CREATE DATABASE "LBD"
TEMPLATE = TEMPLATE0
ENCODING 'WIN1252'
CONNECTION LIMIT -1;
-----------------------------------------------------------
-----------------------------------------------------------
 psql -h localhost -p 5432 -d LBD -U postgres -W


-----------------------------------------------------------------------
SELECT *  //mostrar tabela
 FROM tb_cliente;

-----Criar tabelas---------------------------------------------------
CREATE TABLE tb_cliente(
id_cliente     INTEGER,
titulo         VARCHAR(4),
nome           VARCHAR(32) CONSTRAINT nn_cliente_nome NOT NULL,
sobrenome      VARCHAR(32)
			   CONSTRAINT nn_cliente_sobrenome NOT NULL,
endereco       VARCHAR(62) CONSTRAINT nn_cliente_endereco NOT NULL,
numero         VARCHAR(5)  CONSTRAINT nn_cliente_numero NOT NULL,
complemento    VARCHAR(62),
cep            VARCHAR(10),
cidade         VARCHAR(62) CONSTRAINT nn_ciente_cidade NOT NULL,
estado         VARCHAR(2)  CONSTRAINT nn_cliente_estado NOT NULL,
fone_fixo      VARCHAR(15) CONSTRAINT nn_cliente_fone_fixo NOT NULL,
fone_movel     VARCHAR(15)
					CONSTRAINT nn_cliente_fone_movel NOT NULL,
fg_ativo       INTEGER,
CONSTRAINT pk_cliente_id_cliente PRIMARY KEY(id_cliente)
);


CREATE TABLE tb_item( 
	id_item			INTEGER,
	ds_item 		VARCHAR(64) CONSTRAINT nn_item_ds_item NOT NULL,
	preco_custo		NUMERIC(7,2),
	preco_venda		NUMERIC(7,2),
	fg_ativo		INTEGER,
	CONSTRAINT pk_id_item PRIMARY KEY(id_item)
);


CREATE TABLE tb_pedido(
	id_pedido		INTEGER,
	id_cliente		INTEGER CONSTRAINT nn_pedido_id_cliente NOT NULL,
	dt_compra		TIMESTAMP,
	dt_entrega		TIMESTAMP,
	valor			NUMERIC(7,2),
	fg_ativo		INTEGER,
	CONSTRAINT pk_pedido_id_pedido PRIMARY KEY(id_pedido),
	CONSTRAINT fk_pedido_id_cliente FOREIGN KEY(id_cliente) 
		REFERENCES tb_cliente(id_cliente)
	
);

CREATE TABLE tb_item_pedido(
	id_item			INTEGER,
	id_pedido		INTEGER
						CONSTRAINT nn_item_pedido_id_pedido NOT NULL,
	quantidade		INTEGER,
	CONSTRAINT pk_item_pedido PRIMARY KEY(id_item, id_pedido),
	CONSTRAINT fk_item_pedido_id_item FOREIGN KEY(id_item)
		REFERENCES tb_item(id_item),
	CONSTRAINT fk_item_pedido_id_pedido FOREIGN KEY(id_pedido)
		REFERENCES tb_pedido(id_pedido)
);

CREATE TABLE tb_codigo_barras(
	codigo_barras	INTEGER	
						CONSTRAINT nn_cod_barras_codigo_barras NOT NULL,
	id_item			INTEGER CONSTRAINT nn_cod_barras_id_item NOT NULL,
	CONSTRAINT fk_cod_barras_id_item FOREIGN KEY(id_item)
		REFERENCES tb_item(id_item)
);

CREATE TABLE tb_estoque(
	id_item			INTEGER,
	quantidade		INTEGER,
	CONSTRAINT pk_estoque_id_item PRIMARY KEY(id_item),
	CONSTRAINT fk_estoque_id_item FOREIGN KEY(id_item)
		REFERENCES tb_item(id_item)
);



INSERT INTO tb_cliente(id_cliente, titulo, nome, sobrenome, endereco, numero, complemento,  
					   cep, cidade, estado, fone_fixo, fone_movel, fg_ativo)
VALUES
(1,'Sra', 'Jessica', 'Mendes', 'Avenida Acelino de Leao', '89', NULL, 
'68900 300', 'Macapá', 'AP', '3565 1243', '8765 8999', 1),

(2,'Sr', 'Andrei', 'Junqueira', 'Rua Tabaiares', '1024', NULL,  
'30150 040', 'Belo Horizonte', 'MG', '3676 1209', '8876 4543', 1),

(3,'Sr', 'Alex', 'Matheus', 'Rua Eva Terpins', 's/n', NULL,   
'05327 030', 'São Paulo', 'SP', '6576 0099', '9358 7676', 1);



INSERT INTO tb_cliente
VALUES
(4,'Sr', 'Andre', 'Lopes', 'Rua Fortaleza', '552', NULL,
'11436 360', 'Guaruja', 'SP', '5654 4343', '9821 4321', 1),

(5,'Sr', 'Vitor', 'Silva', 'Entrada Aguá Chata', 's/n','Rodovia 356',
 '07251 000', 'Guarulhos', 'SP', '4343 6712', '831 3411', 1),

(6,'Sr', 'Claudinei', 'Safra', 'Avenida José Osvaldo Marques', '1562', NULL,
'14173 010', 'Sertãozinho', 'SP', '3698 8100', '8131 6409', 1),

(7,'Sr', 'Ricardo', 'Ferreira', 'Alameda Assunta Barizani Tienghi', '88',NULL,
 '18046 705', 'Sorocaba', 'SP', '6534 7099', '9988 1251', 1);



INSERT INTO tb_cliente
VALUES
(8,'Sra', 'Anna', 'Kelly', 'Rua das Acacias', '1089', NULL,
'13187 042', 'Hortolândia', 'SP', '6432 440043', '9465 0023', 1),

(9,'Sra', 'Cristiane', 'Hickman', 'Rua Agenir Martinhon Scachetti', '300', NULL,
 '13341 633', 'Indaiatuba', 'SP', '3512 1243', '9987 0001', 1),

(10,'Sr', 'Marcos', 'Augusto', 'Avenida Australia', 's/n', NULL,
'06852 100', 'Itapecerica da Serra', 'SP', '3623 8821', '8891 2333', 1),

(11,'Sr', 'David', 'Silva', 'Rua Arcy Prestes Ruggeri', '24', 'Esquina do Mercado',
 '18201 720', 'Itapetininga', 'SP', '4565 9240', '7765 4029', 1);



 INSERT INTO tb_cliente
VALUES
(12,'Sr', 'Ricardo', 'Cunha', 'Rua Jose Fortunato de Godoy', '889', NULL,
'13976', 'Itapira', 'SP', '5467 1959', '9244 9584', 1),

(13,'Sra', 'Laura', 'Batista', 'Rua Villa Lobos', '76', NULL,
 '13976 018', 'Ribeirão Preto', 'SP', '2111 8710', '9991 2324', 1),

(14,'Sr', 'Valmil', 'Feliciano', 'Rua Professor Emilton Amaral', '961', 'Loteamento Novo Horizonte',
'58053 223', 'João Pessoa', 'PB', '4431 8740', '9766 0033', 1),

(15,'Sr', 'Agnaldo', 'Aparecido', 'Rua Soldado Celoi Tonelli', '778', NULL,
 '09240 320', 'Santo André', 'SP', '2386 8092', '99625 3683', 1);





INSERT INTO tb_item(id_item, ds_item, preco_custo, preco_venda, fg_ativo)
 VALUES
 (1, 'Quebra-cabeça de Madeira', 15.23, 21.95, 1),
 (2, 'Cubo X', 7.45, 11.49, 1),
 (3, 'CD Linux', 1.99, 2.49, 1),
 (4, 'Tecidos', 2.11, 3.99, 1),
 (5, 'Moldura', 7.54, 9.95, 1),
 (6, 'Ventilador Pequeno', 9.23, 15.75, 1);



INSERT INTO tb_item(id_item, ds_item, preco_custo, preco_venda, fg_ativo)
 VALUES
 (7, 'Ventilador Grande', 13.36, 19.95, 1),
 (8, 'Escova de Dentes', 0.75, 1.45, 1),
 (9, 'Papel A4', 2.34, 2.45, 1),
 (10, 'Saco de Transporte', 0.01, 0.0, 1),
 (11, 'Alto-Falantes', 19.73, 25.32, 1);



INSERT INTO  tb_pedido(id_pedido, id_cliente, dt_compra, dt_entrega, valor, fg_ativo)
VALUES
(1,3, '13-03-2013', '17-03-2013', 2.99, 1),
(2, 8, '23-06-2013', '24-06-2013', 0.00, 1),
(3, 15, '02-09-2013', '12-09-2013', 3.99, 1),
(4, 13, '03-09-2013', '10-09-2013', 2.99, 1),
(5, 8, '21-07-2013', '24-07-2013', 0.00, 1);



INSERT INTO tb_item_pedido(id_pedido, id_item, quantidade)
VALUES
(1, 4, 1),
(1, 7, 1),
(1, 9, 1),
(2, 1, 1),
(2, 10, 1),
(2, 7, 2);



INSERT INTO tb_item_pedido(id_pedido, id_item, quantidade)
VALUES
(2, 4, 2),
(3, 2, 1),
(3, 1, 1),
(4, 5, 2),
(5, 1, 1),
(5, 3, 1);



INSERT INTO tb_codigo_barras(codigo_barras, id_item)
VALUES
(624152783, 1),
(624157463, 2),
(626453783, 3),
(624152774, 3),
(746574384, 4),
(345345867, 5),
(643456456, 6);



INSERT INTO tb_codigo_barras(codigo_barras, id_item)

VALUES
(847673683, 7),
(624123458, 8),
(947362553, 8),
(947362746, 8),
(458726364, 9),
(987987983, 11),
(23987237, 11);


INSERT INTO tb_estoque(id_item, quantidade)

VALUES
(1,12),
(2,2),
(4,8),
(5,3),
(7, 8),
(8, 18),
(10, 1);




SELECT inet_server_port();

SELECT current_database();

SELECT current_user;

SELECT inet_client_addr(); 


 SELECT cidade AS "Cidade do Cliente",
 	sobrenome AS "Sobrenome do Cliente"
 FROM tb_cliente tc;


SELECT cidade "Cidade do Cliente",
	sobrenome "Sobrenome do Cliente"
FROM tb_cliente tc 
ORDER BY cidade DESC, sobrenome ASC;


SELECT sobrenome
FROM tb_cliente 
ORDER BY 1;

SELECT ds_item, preco_custo
FROM tb_item
ORDER BY 1;

SELECT ds_item, preco_custo,
	preco_custo * 100 AS RESULTADO
FROM tb_item
ORDER BY 1;

SELECT ds_item, preco_custo,
	CAST((preco_custo * 100)AS INT)AS"Preço de Custo"
FROM tb_item
ORDER BY 1;




SELECT sobrenome AS "Sobrenome do Cliente",
	Cidade AS "Cidade do Cliente"
FROM tb_cliente
WHERE cidade = 'São Paulo';


SELECT sobrenome AS "Sobrenome do Cliente",
	cidade AS "Cidade do Cliente"
FROM tb_cliente
WHERE titulo <> 'Sra'
AND(cidade = 'Sertãozinho' OR cidade = 'São Paulo');


SELECT sobrenome AS "Sobrenome do Cliente",
	cidade AS "Cidade do Cliente"
FROM tb_cliente
WHERE cidade = 'São Paulo'
OR cidade = 'Sorocaba';



select id_cliente, nome
from tb_cliente
where nome between 'A' and 'D';


select id_cliente, nome
from tb_cliente
where nome like '%e';


select id_cliente, nome
from tb_cliente
where nome like '____';


select id_cliente, nome
from tb_cliente
where nome like '_a%';

select id_cliente, nome
from tb_cliente
where nome ilike '_A%'; 


select id_cliente, nome
from tb_cliente
limit 5;

select id_cliente, nome
from tb_cliente
limit 8 offset 2; 


select*
from tb_teste
where coluna_a is null; 

select*
from tb_teste
where coluna_a is not null;


select cast('2023/08/30' as date); 

select cast ('2023/08/30' as timestamp);


select*
from tb_pedido
where date_part('month', dt_compra) = 0; 


select*
from tb_pedido
where dt_compra >= cast ('2013 07 21' as date); 

select now(), current_timestamp; 

select dt_entrega - dt_compra as intervalo 
from tb_pedido; 


select id_cliente
from tb_cliente
where nome = 'Anna' and sobrenome = 'Kelly'; 


select*
from tb_pedido
where id_cliente = 8; 


select tb_cliente.nome, tb_pedido.dt_compra 
from tb_cliente, tb_pedido
where tb_cliente.id_cliente  = tb_pedido.id_cliente  
and tb_cliente.id_cliente = 8; 




select tb_cliente.nome, tb_pedido.dt_compra 
from tb_cliente, tb_pedido
where tb_cliente.id_cliente = tb_pedido.id_cliente 
and tb_cliente.nome = 'Agnaldo'
and tb_cliente.sobrenome = 'Aparecido';


select ds_item, preco_custo, codigo_barras
from tb_item, tb_codigo_barras
where tb_codigo_barras.id_item  = tb_item.id_item 
order by 2;



select c.nome, p.dt_compra 
from tb_cliente c, tb_pedido p
where  c.id_cliente  = p.id_cliente 
and c.nome = 'Anna'
and c.sobrenome = 'Kelly';



select c.nome, p.dt_compra 
from tb_cliente c
inner join tb_pedido p  on (c.id_cliente = p.id_cliente)
where c.nome = 'Anna'
and c.sobrenome = 'Kelly';


select c.nome, p.dt_compra, ip.id_item, ip.quantidade 
from tb_cliente c, tb_pedido p, tb_item_pedido ip
where c.id_cliente = p.id_cliente 
and p.id_pedido  = ip.id_pedido 
and c.nome = 'Anna'
and c.sobrenome = 'Kelly';


select c.nome, p.dt_compra, ip.id_item , ip.quantidade 
from tb_cliente c
inner join tb_pedido p on (c.id_cliente = p.id_cliente)
inner join tb_item_pedido ip on (p.id_pedido = ip.id_pedido)
where c.nome = 'Anna'
and c.sobrenome = 'Kelly';




select c.nome, p.dt_compra, ip.id_item,i.ds_item, ip.quantidade 
from tb_cliente c, tb_pedido p, tb_item_pedido ip, tb_item i
where c.id_cliente = p.id_cliente 
and p.id_pedido  = ip.id_pedido 
and ip.id_item = i.id_item
and c.nome = 'Anna'
and c.sobrenome = 'Kelly';




select c.nome, p.dt_compra, ip.id_item, 
	i.ds_item, ip.quantidade
from tb_cliente c
inner join tb_pedido p on (c.id_cliente = p.id_cliente)
inner join tb_item_pedido ip on (p.id_pedido = ip.id_pedido)
inner join tb_item i on (ip.id_item = i.id_item)
where c.nome = 'Anna'and
	c.sobrenome = 'Kelly';


select preco_custo , ds_item
from tb_item
where preco_custo = (select max(preco_custo ) from tb_item); 



select cast(avg(preco_venda) as numeric(7,2)) as "Média"
from tb_item; 


create table tb_pessoas(
id_pessoas  INTEGER,
nm_pessoas  VARCHAR(60),
constraint fk_tb_pessoas_id_pessoas primary key (id_pessoas)
);

insert into tb_pessoas(id_pessoas, nm_pessoas)
values
(1, 'João'),
(2, 'João'),
(3, 'Maria'),
(4, 'Maria'),
(5, 'Pero'),
(6, 'Rafael'),
(7, 'Marina'),
(8, 'Pedro');

create table tb_parte(
id_parte			INTEGER,
descricao			VARCHAR(32),
id_parte_principal	INTEGER,
primary key(id_parte),
foreign key(id_parte_principal) references tb_parte(id_parte)
);

insert into tb_parte
values
(1, 'Mesa e Cadeira', NULL),
(2, 'Cadeira', 1),
(3, 'Mesa', 1);

select p1.descricao as "Combinacao",
	   p2.descricao as "Partes"
from tb_parte p1, tb_parte p2
where p1.id_parte = p2.id_parte_principal;

select nome, sobrenome
from tb_cliente
where sobrenome similar to '%(Matheus|Mendes)%';

select nome, sobrenome
from tb_cliente
where nome similar to '(S|A)%';


select
(select min(preco_venda)from tb_item) as Menor,
(select max(preco_venda)from tb_item) as maior,
(select avg(preco_venda)from tb_item) as Média;

create tablespace tablespace_01
location 'C://tablespace_postgresql';

create table tb_test_tablespace(
col_2		INTEGER)
tablespace tablespace_01;

insert into tb_test_tablespace
values
(generate_series(1, 1000));

select*
from tb_test_tablespace;


insert into tb_test_tablespace
values
(generate_series(1, 1000));

select*
from tb_test_tablespace;


select i.id_item, i.ds_item, e.quantidade
from tb_item i, tb_estoque e
where i.id_item = e.id_item;


select i.id_item, i.ds_item
from tb_item i
where i.id_item not in (select i.id_item
				from tb_item  i, tb_estoque e
				where i.id_item = e.id_item)

select i.id_item, i.ds_item, e.quantidade 
from tb_item i
left outer join tb_estoque  e on(i.id_item = e.id_item);


select i.id_item, i.ds_item, e.quantidade
from tb_item i
left outer join tb_estoque e
 on(i.id_item = e.id_item and e.quantidade > 2);


create table tb_teste_tipo(
valor_usado    VARCHAR(10),
res_bool       BOOL
);


insert into tb_teste_tipo
values
('True', TRUE),
('1', '1'),
('t', 't'),
('no', 'no'),
('f', 'f'),
('NULL', NULL),
('FALSE', FALSE);

drop table tb_teste_tipo;

create table tb_teste_tipo(
char_simples     CHAR,
char_fixo        char(13),
char_variavel    VARCHAR(128)
);

insert into tb_teste_tipo
values
('F', '0-349-10177-9', 'A fabrica de string'),
('S', '1-85723-457-X', 'Excecao'),
('F', '0-349-10768-8', 'Particular'),
(null,'', 'T.B.D');

insert into tb_teste_tipo
values
('L', 'Um string muito longo', 'L');


select char_fixo,
	length(char_fixo),
	char_variavel
from tb_teste_tipo
where char_simples = 'S';


select char_fixo,
	length(char_fixo),
	char_variavel
from tb_teste_tipo
where char_simples is NULL;


create table tb_teste_tipo(
um_smallint    smallint,
um_int			INTEGER,
um_float        FLOAT,
um_real         real,
um_numeric      numeric(5, 2)
);

insert into tb_teste_tipo 
values
(2, 2, 2.0, 2.0, 2.0),
(-100, -100, 123.456789, 123.456789, 123.456789),
(-32768, -123456789, 1.23456789, 1.23456789, 1.23456789),
(-32768, -123456789, 123456789.123456789, 123456789.123456789, 123.123456789);

insert into tb_teste_tipo 
values
(-32768, -123456789, 123456789.123456789, 23456789.123456789, 123456789.123456789); --  Detalhe: A field with precision 5, scale 2 must round to an absolute value less than 10^3.


select *
from tb_teste_tipo;



create table tb_funcionario_2(
cod_referencia		CHAR(5),
dias_uteis			int[]
);


insert into tb_funcionario_2 
values
('val01','{0,1,0,1,1,1,1}');



insert into tb_funcionario_2 
values
('val02', '{0,1,1,1,1,0,1}');


select *
from tb_funcionario_2;


select dias_uteis[2]
from tb_funcionario_2 
where cod_referencia = 'val02';


drop table tb_funcionario_2;

create table tb_funcionario_2(
cod_referencia		Char(5),
dias_uteis			Int array[7]
);


insert into tb_funcionario_2 
values
('val01','{0,1,0,1,1,1,1}');



insert into tb_funcionario_2 
values
('val02', '{0,1,1,1,1,0,1}');



select cast(dt_entrega as char(10))
from tb_pedido;


select preco_venda, preco_venda::integer as "Guia de Preço"
from tb_item 
where preco_venda > 5.00;


select ds_item,
	substr(ds_item,3,5),
	preco_venda,
	round(preco_venda, 1)
from tb_item;


select trim('0' from '000Teste da Função TRIM000');

select trim(' Teste da Função TRIM');

select strpos('Teste da Função TRIM', 'e');

select abs(-12345.67);


select i.id_item,
		i.ds_item,
		e.quantidade,
		current_timestamp
from tb_item i
join tb_estoque e on(i.id_item = e.id_item);


select current_user,
	current_time;


create table tb_teste_oid(
col_a		Integer,
col_b		Integer
)without oids;


insert into tb_teste_oid 
values(generate_series(1,100),
	generate_series(100,200));
	
select oid, col_a, col_b
from tb_teste_oid;

show all;


create table tb_teste_restricoes(
col_notnull		int not null,
col_unique		int unique,
col_pk			int primary key,
col_default		int default 42,
col_check		int check(col_check < 42)
);


insert into tb_teste_restricoes(col_notnull,
								col_unique,
								col_pk,
								col_default,
								col_check)
values
(1,1,1,1,1),
(2,2,2,2,2);



insert into tb_teste_restricoes(col_notnull, -- Ira ocorrer um erro
								col_unique,
								col_pk,
								col_default,
								col_check)
values
(2,2,2,2,2); -- Erro SQL [23505]: ERROR: duplicate key value violates unique constraint "tb_teste_restricoes_pkey" Detalhe: Key (col_pk)=(2) already exists.




insert into tb_teste_restricoes(col_notnull,
								col_unique,
								col_pk,
								col_default,
								col_check)
values
(1,null,98,1,1),
(1,null,99,1,1);



insert into tb_teste_restricoes(col_notnull, --Erro SQL [23505]: ERROR: duplicate key value violates unique constraint "tb_teste_restricoes_col_unique_key"Detalhe: Key (col_unique)=(2) already exists.
								col_unique,
								col_pk,
								col_default,
								col_check)
values
(2,2,9,2,2);



insert into tb_teste_restricoes(col_notnull,--Erro SQL [23514]: ERROR: new row for relation "tb_teste_restricoes" violates check constraint "tb_teste_restricoes_col_check_check"Detalhe: Failing row contains (3, 3, 3, 3, 100).
								col_unique,
								col_pk,
								col_default,
								col_check)
values
(3,3,3,3,100);




insert into tb_teste_restricoes(col_notnull, --Erro SQL [42601]: ERROR: INSERT has more target columns than expressionsPosição: 115
								col_unique,
								col_pk,
								col_default,
								col_check)
values
(3,3,3,41);



drop table tb_teste_restricoes;

create table tb_teste_restricoes(
chave1					int,
chave2					int,
mystring				VARCHAR(15),
constraint cs1 check(mystring<>''),
constraint cs2 primary key(chave1, chave2)
);


insert into tb_teste_restricoes
values 
(1,1,'Olá'),
(1,2,'Tchau');

insert into tb_teste_restricoes --Erro SQL [23514]: ERROR: new row for relation "tb_teste_restricoes" violates check constraint "cs1"Detalhe: Failing row contains (1, 2, ).
values
(1,2,'');


alter table tb_teste_restricoes
add column mydate date;


alter table tb_teste_restricoes 
rename column mydate to dt_nascimento;


select*
from tb_teste_restricoes;
	

alter table tb_teste_restricoes
drop constraint cs1;


alter table tb_teste_restricoes
add constraint cs3 unique(dt_nascimento);


alter table tb_teste_restricoes
alter column mystring set default 'ok';


alter table tb_teste_restricoes
alter dt_nascimento type varchar(32);


alter table tb_teste_restricoes
rename to tb_teste_restricoes_2;


drop table tb_teste_restricoes_2;


create temporary table tb_teste_restricoes(
chave1			int,
chave2			int,
mystring		Varchar(15),
constraint cs1 check(mystring <>''),
constraint cs2 primary key(chave1, chave2)
);


create table tb_cidades(
nome			text,
populacao		float,
altitude		int);

create table tb_capitais(
uf				char(2)
)inherits(tb_cidades);


select*
from tb_capitais;

alter table tb_cidades drop column nome;

drop table tb_cidades, tb_capitais;


create table tb_cidades(
nome			text,
populacao		float,
altitude		int);

create table tb_capitais(
uf				char(2),
like tb_cidades
);


select i.ds_item, e.quantidade
from tb_item i
join tb_estoque e on(i.id_item = e.id_item);



create view vs_status_estoque as
select i.ds_item, e.quantidade
from tb_item i
join tb_estoque e on(i.id_item = e.id_item);


select*
from vs_status_estoque;


create table tb_teste_view(
col_a    serial,
col_b    	varchar(10),
col_c    	varchar(10),
fg_ativo	boolean,
primary key(col_a)
);


insert into tb_teste_view(col_b,
							col_c,
							fg_ativo)
values
('Desc 1', 'Desc 1', TRUE),
('Desc 2', 'Desc 2', TRUE),
('Desc 3', 'Desc 3', TRUE);


create view vw_teste as
select*
from tb_teste_view;


select*
from vw_teste;

alter table tb_teste_view
add column col_d VARCHAR(10);


create or replace view vw_teste as
select*
from tb_teste_view;

create table "Tb_Cliente_Teste"
as
select*
from tb_cliente;


select count(*)
from "Tb_Cliente_Teste";


select quote_ident('Tb_Cliente_Teste'); 

create table tb_dados_duplicados(
id_cliente			INTEGER,
nm_cliente			VARCHAR,
sobrenome			VARCHAR,
idade				INTEGER
);


insert into tb_dados_duplicados
values
(1, 'Philip', 'Marlowe', 38),
(2, 'Richard', 'Hannay', 42),
(3, 'Holly', 'Martins', 25),
(4, 'Harry', 'Palmer', 36),
(4, 'Mark', 'Hall', 47);

select*
from tb_dados_duplicados 
where id_cliente in(select id_cliente
					from tb_dados_duplicados 
					group by id_cliente
					having count(*) > 1);

				
delete 
from tb_dados_duplicados 
where id_cliente = 4
and sobrenome = 'Hall';


create table tb_novo_cliente
as
select id_cliente
from tb_dados_duplicados;

insert into tb_novo_cliente 
values(4);

select*
from tb_novo_cliente;

lock table tb_novo_cliente in row exclusive mode;

	delete from tb_novo_cliente
	where ctid not in (select min(ctid)
						from tb_novo_cliente
						where id_cliente in(1, 2, 3, 4)
						group by id_cliente);
						
					
alter table  tb_novo_cliente 
add constraint pk_tb_novo_cliente_id_cliente
primary key(id_cliente);

alter table tb_novo_cliente 
add unique(id_cliente);

create unique index on tb_novo_cliente(id_cliente);


select*
from generate_series(1,5);


select date(generate_series(now(),
			now() + '1 week',
			'1 day'));
			
select (random()* (2*10^9))::INTEGER;

select(random()*(9*10^18))::BIGINT;

select(random()*100.)::numeric(4,2);

select repeat('1',(random()*40)::INTEGER);

select substr('ajsdhaisdashdkah',1,
				(random()*26)::INTEGER);
			
			
select generate_series(1,10)as chave,
	(random()*100.)::numeric(4,2),
	repeat('1',(random()*25)::integer)
order by random() * 3;


create table tb_exemplos
as
select*
from tb_cliente
where id_cliente is null;


select*
from tb_cliente;

copy tb_exemplos
from 'C:/temp/tb_cliente_202310182125.csv'
	using delimiters','
	csv header;


create table tb_xml(
id				serial,
documento_xml	xml,
constraint pk_xml_id primary key(id));


insert into tb_xml(documento_xml)
select xmlforest(nome, endereco, cidade)
from tb_cliente
)

select*
from tb_xml;

copy(select documento_xml
	from tb_xml)
	to'c:/temp/xml_teste.xml';

create table tb_produtos(
id_produto			Int not null primary key,
produto_codigo		VARCHAR(20),
produto_nome		VARCHAR(60),
produto_valor		real,
produto_situacao	VARCHAR(1)DEFAULT'A',
data_criacao		timestamp,
data_atualizacao		timestamp
);



alter table tb_produtos
add column	produtos_categorias text[];


alter table tb_produtos
add column produto_estoque json;


insert into tb_produtos
values
(99, '6234', 'COCA-COLA', 6, 'A', '01/01/2023', '01/01/2023',
	'{"REFRIGERANTE", "LATA", "BEDIDA","COLA"}',
	'{"info_estoque":
	{"tem_estoque":"SIM",
	"quantidade":17,
	"ultima_compra":"01/01/2023"}
	}'
	);

select produto_estoque -> 'info_estoque'->>'quantidade'
		as quantidade
from tb_produtos
where produto_nome like 'COCA-COLA';


select produto_estoque -> 'info_estoque'
		as "Retornando um JSON"
from tb_produtos
where produto_nome like 'COCA-COLA';


copy(select*
		from tb_cliente)
to 'c:/temp/cliente_18_10_23.csv'
with
delimiter as ';';


copy(select*
		from tb_cliente)
to 'c:/temp/cliente_18_10_23.txt'
with
delimiter as ';';



create or replace function fn_tx_venda(real)
returns real as
$$
declare
v_subtotal alias for $1;
begin
	return v_subtotal * 0.06;
end
$$
language plpgsql;
end




select fn_tx_venda(9.87);




create or replace function fn_tx_venda(p_subtotal real)
returns real as
$$
begin
return p_subtotal * '0.06';
end
$$
language plpgsql;





create or replace function fn_variaveis(INTEGER, varchar)
returns varchar as 
$$
begin
	return 'Variáveis de retorno:'||$1||$2;
end
$$
language plpgsql;

select fn_variaveis(1, 'LBD');






create or replace function fn_tipo_coluna(integer)
returns varchar as 
$$
declare 
v_nome tb_cliente.nome%type;
begin
	select nome into v_nome
	from tb_cliente
	where id_cliente = $1;

return 'Nome do cliente:'||v_nome;
end
$$
language plpgsql;



create or replace function fn_tipo_tupla(integer)
returns varchar as 
$$
declare 
v_tupla tb_cliente%rowtype;
begin
	select * into v_tupla
	from tb_cliente
	where id_cliente = $1;

return 'Tupla(linha):'||v_tupla;
end
$$
language plpgsql;


select fn_tipo_tupla(10);


create or replace function fn_cliente(tb_cliente.id_cliente%type)
returns text as 
$$
declare 
v_linha record;
begin
	select * into v_linha
	from tb_cliente 
	where id_cliente = $1;
if not found then
 raise exception 'Cliente % não encontrado',$1;
else
return 'Cliente encontrado';
end if;
end
$$
language plpgsql;

select fn_cliente(10);


select fn_cliente(99);



create table tb_log(
nome			varchar(30),
data_hora		timestamp
);


create or replace function fn_log(p_nome varchar)
returns timestamp as
$$
begin 
	insert into tb_log
	values(p_nome, now());
return now();
end
$$
language plpgsql;


select fn_log('Geraldo');



select*
from tb_log;



create or replace function fn_loop_basico()
returns void as 
$$
declare 
v_contador integer;
begin 
	v_contador := 0;
loop
	v_contador := v_contador + 1;
	raise notice 'contador eh: %', v_contador;
	exit when v_contador >= 1000;
end loop;
return;
end;
$$
language plpgsql;


select fn_loop_basico();




create sequence sq_categorias;

create table tb_categoria(
id_categoria			integer,
ds_categoria			varchar(40) not null,
fg_ativo				integer not null,
primary key(id_categoria)
);







create or replace function fn_categoria(p_id_categoria integer,
                                        p_descricao varchar,
                                        p_flag integer,
                                        p_opcao char)
returns integer as 
$$
declare 
   v_id_categoria tb_categoria.id_categoria%type;
begin
	if p_opcao = 'I' then
	  	select nextval('sq_categoria') into v_id_categoria;
	 
	 	insert into tb_categoria(id_categoria,
	                         	 ds_categoria,
	                         	 fg_ativo)
     	values(v_id_categoria, p_descricao, p_flag);
    
    return v_id_categoria;
   
   elsif p_opcao = 'U' then
	    update tb_categoria
	    set ds_categoria = p_descricao
	    where id_categoria = p_id_categoria;
	   
   return p_id_categoria;
  
  elsif p_opcao = 'D' then
	  delete 
	  from tb_categoria 
	  where id_categoria = p_id_categoria;
	 
 	return 0;
 else
 	return -1;
 end if;
	 exception 
	   when others then
	   return -1;
	
end;
$$
language plpgsql;



select fn_categoria(null, 'CATEGORIA 1',1,'I');
select fn_categoria(null, 'CATEGORIA 2',1,'I');
select fn_categoria(null, 'CATEGORIA 3',1,'I');

select fn_categoria(1, 'CATEGORIA 1 - ALTERADA', 1,'U');



select fn_categoria(3, null, null, 'D');




create or replace function fn_km_to_milhas(float)
	returns float as 
'
	select $1*0.62
'
language sql;


select fn_km_to_milhas(132) as milhas;




CREATE TABLE tb_clientes (
  codigo          INTEGER,
  nm_cliente      VARCHAR(60),
  cidade          VARCHAR(40),
  dt_nascimento   DATE,
  PRIMARY KEY(codigo)
);

CREATE TABLE tb_compras (
  ref_produtos    INTEGER,
  ref_clientes    INTEGER,
  quantidade      INTEGER,
  dt_compra       DATE,
  preco           DECIMAL(7,2),
  PRIMARY KEY(ref_produtos, ref_clientes),
  FOREIGN KEY(ref_produtos) REFERENCES tb_produtos(codigo),
  FOREIGN KEY(ref_clientes) REFERENCES tb_clientes(codigo)
);

INSERT INTO tb_produtos (CODIGO, ds_produto, UNIDADE, ESTOQUE, PRECO_COMPRA, PRECO_VENDA)
VALUES
(2, 'SABAO', 'LT', 50, 3.90, 6.00),
(3, 'REFRIGERANTE', 'LT', 900, 3.10, 4.55),
(4, 'BALA FLOPI', 'PC', 1400, 2.30, 3.00),
(5, 'SORVETE', 'LT', 400, 4.90, 5.30),
(6, 'SUCO EM PO', 'PC', 200, 2.95, 3.95);


INSERT INTO tb_clientes (CODIGO, nm_cliente, CIDADE, dt_nascimento)
VALUES
(1, 'MARCELO NUNES DA SILVA', 'RIBEIRÃO PRETO', '26/02/2000'),
(2, 'CESAR DOMINGUES', 'SERTÃOZINHO', '13/10/1988'),
(10, 'MOACIR DE CARVALHO', 'CRAVINHOS', '20/06/1986'),
(4, 'JOÃO ALEX MEDEIROS', 'FLORIANÓPOLIS', '29/03/1982'),
(5, 'DANIEL AFONSO MENDES', 'SANTA CLARA', '23/12/2003');


INSERT INTO tb_compras (REF_CLIENTES, REF_PRODUTOS, QUANTIDADE, dt_compra, PRECO)
VALUES
(2, 2, 2, '31/10/2022', 12.00),
(1, 3, 42, '31/10/2022', 191.10),
(1, 4, 7, '31/10/2022', 12.00),
(1, 5, 7, '31/10/2022', 15.00),
(1, 6, 3, '31/10/2022', 11.85);

SELECT *
FROM tb_clientes;

SELECT *
FROM tb_produtos;

SELECT *
FROM tb_compras;


create or replace function fn_get_clientes(integer)
	returns varchar as 
'
	select nm_cliente
	from tb_clientes
	where codigo =$1;
'
language sql;




create or replace function fn_get_produtos(integer)
	returns varchar as 
'
	select ds_produto
	from tb_produtos
	where codigo =$1;
'
language sql;



select ref_clientes,
	fn_get_clientes(ref_clientes),
	quantidade,
	preco,
	ref_produtos,
	fn_get_produtos(ref_produtos)
from tb_compras;


create table tb_empregados(
nome			Varchar		not null,
salario			numeric
);

create table tb_empregados_auditoria(
operacao		char		not null,
usuario			Varchar		not null,
dt_hr			timestamp	not null,
nome			varchar		not null,
salario			numeric
);


create or replace function fn_empregado_auditoria()
	returns trigger as 
$$
begin 
	if(tg_op = 'DELETE') then
		insert into tb_empregados_auditoria
			select 'E', user, now(), old.*;
		return old;
elsif(tg_op = 'UPDATE')then
	insert into tb_empregados_auditoria
		select 'A', user, now(), new.*;
	return new;

elsif(tg_op = 'INSERT')then
	insert into tb_empregados_auditoria 
	select'I',user,now(), new.*;
return new;
end if;

return null;
end;
$$
language plpgsql;


create trigger tg_empregados_auditoria
after insert or update or delete on tb_empregados
for each row execute procedure fn_empregado_auditoria();
